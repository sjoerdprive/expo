datasource db {
  provider = "sqlite"
  url      = "file:./storage.db"
}

generator client {
  provider = "prisma-client-js"
}

model Settings {
  id            String @id @unique @default(uuid())
  themeColorRGB String @default("255, 225, 91")
  siteName      String @default("Expo")
}

model Expo {
  id         String    @id @unique @default(uuid())
  title      String
  blurb      String?   @default("")
  slug       String    @unique
  layout     String    @default("horizontal")
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  images     Image[]
  status     String    @default("draft")
}

model Image {
  id      String  @id @unique @default(uuid())
  key     String
  src     String  @unique
  title   String
  alt     String  @default("")
  caption String? @default("")
  Expo    Expo?   @relation(fields: [expoId], references: [id])
  expoId  String?
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  slug  String @unique
  expos Expo[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
